summary(ifmat_ld_co03$Infit_0713)
summary(ifmat_ld_co03$Infit_0812)
summary(ifmat_ld_co03$Infit_085115)
write.table(ifmat_ld_co03, "C:/Users/petere/Desktop/ifmat_ld_co03_1000_3crit.txt", sep="\t")
##2pld70
ifmat_2pl_d70 <- data.frame(matrix(NA,  ncol = 50))
n <- c(100, 300, 1000) #Sample size
i <- c(10, 20, 50) #Item set size
m <- 1000 #Number of sampled data matrices per ss/is combination
for(r in 1:length(n)){
ss <- n[r]
for (t in 1:length(i)){
is <- i[t]
for (s in 1:m){
sm <- sim.2pl(ss, is, discrim = 0.70)
rm <- RM(sm) # Estimate Rasch parameters
pp <- person.parameter(rm) #Read person parameters
fs <- itemfit(pp) #Compute fit statistics
ifmat_2pl_d70 <- rbind(ifmat_2pl_d70, fs$i.infitMSQ)
ifmat_2pl_d70$Infit_0713[nrow(ifmat_2pl_d70)] <- (sum(ifmat_2pl_d70[nrow(ifmat_2pl_d70),1:is]<0.7)+sum(ifmat_2pl_d70[nrow(ifmat_2pl_d70),1:is]>1.3))
ifmat_2pl_d70$Infit_0812[nrow(ifmat_2pl_d70)] <- (sum(ifmat_2pl_d70[nrow(ifmat_2pl_d70),1:is]<0.8)+sum(ifmat_2pl_d70[nrow(ifmat_2pl_d70),1:is]>1.2))
ifmat_2pl_d70$Infit_085115[nrow(ifmat_2pl_d70)] <- (sum(ifmat_2pl_d70[nrow(ifmat_2pl_d70),1:is]<0.85)+sum(ifmat_2pl_d70[nrow(ifmat_2pl_d70),1:is]>1.15))
ifmat_2pl_d70$ss[nrow(ifmat_2pl_d70)] <- ss
ifmat_2pl_d70$is[nrow(ifmat_2pl_d70)] <- is
ifmat_2pl_d70$ni[nrow(ifmat_2pl_d70)] <- ncol(ifmat_2pl_d70[nrow(ifmat_2pl_d70),])
}
}
}
ifmat_2pl_d70 <- ifmat_2pl_d70[-1,]
summary(ifmat_2pl_d70$Infit_0713)
summary(ifmat_2pl_d70$Infit_0812)
summary(ifmat_2pl_d70$Infit_085115)
write.table(ifmat_2pl_d70, "C:/Users/petere/Desktop/ifmat_2pl_d70_1000_3crit.txt", sep="\t")
##LD_co05
ifmat_ld_co05 <- data.frame(matrix(NA,  ncol = 50))
n <- c(100, 300, 1000) #Sample size
i <- c(10, 20, 50) #Item set size
m <- 1000 #Number of sampled data matrices per ss/is combination
for(r in 1:length(n)){
ss <- n[r]
for (t in 1:length(i)){
is <- i[t]
for (s in 1:m){
sm <- sim.locdep(ss, is, it.cor = 0.5)
rm <- RM(sm) # Estimate Rasch parameters
pp <- person.parameter(rm) #Read person parameters
fs <- itemfit(pp) #Compute fit statistics
ifmat_ld_co05 <- rbind(ifmat_ld_co05, fs$i.infitMSQ)
ifmat_ld_co05$Infit_0713[nrow(ifmat_ld_co05)] <- (sum(ifmat_ld_co05[nrow(ifmat_ld_co05),1:is]<0.7)+sum(ifmat_ld_co05[nrow(ifmat_ld_co05),1:is]>1.3))
ifmat_ld_co05$Infit_0812[nrow(ifmat_ld_co05)] <- (sum(ifmat_ld_co05[nrow(ifmat_ld_co05),1:is]<0.8)+sum(ifmat_ld_co05[nrow(ifmat_ld_co05),1:is]>1.2))
ifmat_ld_co05$Infit_085115[nrow(ifmat_ld_co05)] <- (sum(ifmat_ld_co05[nrow(ifmat_ld_co05),1:is]<0.85)+sum(ifmat_ld_co05[nrow(ifmat_ld_co05),1:is]>1.15))
ifmat_ld_co05$ss[nrow(ifmat_ld_co05)] <- ss
ifmat_ld_co05$is[nrow(ifmat_ld_co05)] <- is
ifmat_ld_co05ni[nrow(ifmat_ld_co05)] <- ncol(ifmat_ld_co05[nrow(ifmat_ld_co05),])
}
}
}
ifmat_ld_co05 <- ifmat_ld_co05[-1,]
summary(ifmat_ld_co05$Infit_0713)
summary(ifmat_ld_co05$Infit_0812)
summary(ifmat_ld_co05$Infit_085115)
write.table(ifmat_ld_co05, "C:/Users/petere/Desktop/ifmat_ld_co05_1000_3crit.txt", sep="\t")
##2pld70
ifmat_2pl_d70 <- data.frame(matrix(NA,  ncol = 50))
n <- c(100, 300, 1000) #Sample size
i <- c(10, 20, 50) #Item set size
m <- 1000 #Number of sampled data matrices per ss/is combination
for(r in 1:length(n)){
ss <- n[r]
for (t in 1:length(i)){
is <- i[t]
for (s in 1:m){
sm <- sim.2pl(ss, is, discrim = 0.70)
rm <- RM(sm) # Estimate Rasch parameters
pp <- person.parameter(rm) #Read person parameters
fs <- itemfit(pp) #Compute fit statistics
ifmat_2pl_d70 <- rbind(ifmat_2pl_d70, fs$i.infitMSQ)
ifmat_2pl_d70$Infit_0713[nrow(ifmat_2pl_d70)] <- (sum(ifmat_2pl_d70[nrow(ifmat_2pl_d70),1:is]<0.7)+sum(ifmat_2pl_d70[nrow(ifmat_2pl_d70),1:is]>1.3))
ifmat_2pl_d70$Infit_0812[nrow(ifmat_2pl_d70)] <- (sum(ifmat_2pl_d70[nrow(ifmat_2pl_d70),1:is]<0.8)+sum(ifmat_2pl_d70[nrow(ifmat_2pl_d70),1:is]>1.2))
ifmat_2pl_d70$Infit_085115[nrow(ifmat_2pl_d70)] <- (sum(ifmat_2pl_d70[nrow(ifmat_2pl_d70),1:is]<0.85)+sum(ifmat_2pl_d70[nrow(ifmat_2pl_d70),1:is]>1.15))
ifmat_2pl_d70$ss[nrow(ifmat_2pl_d70)] <- ss
ifmat_2pl_d70$is[nrow(ifmat_2pl_d70)] <- is
ifmat_2pl_d70$ni[nrow(ifmat_2pl_d70)] <- ncol(ifmat_2pl_d70[nrow(ifmat_2pl_d70),])
}
}
}
ifmat_2pl_d70 <- ifmat_2pl_d70[-1,]
summary(ifmat_2pl_d70$Infit_0713)
summary(ifmat_2pl_d70$Infit_0812)
summary(ifmat_2pl_d70$Infit_085115)
write.table(ifmat_2pl_d70, "C:/Users/petere/Desktop/ifmat_2pl_d70_1000_3crit.txt", sep="\t")
##LD_co05
ifmat_ld_co05 <- data.frame(matrix(NA,  ncol = 50))
n <- c(100, 300, 1000) #Sample size
i <- c(10, 20, 50) #Item set size
m <- 1000 #Number of sampled data matrices per ss/is combination
for(r in 1:length(n)){
ss <- n[r]
for (t in 1:length(i)){
is <- i[t]
for (s in 1:m){
sm <- sim.locdep(ss, is, it.cor = 0.5)
rm <- RM(sm) # Estimate Rasch parameters
pp <- person.parameter(rm) #Read person parameters
fs <- itemfit(pp) #Compute fit statistics
ifmat_ld_co05 <- rbind(ifmat_ld_co05, fs$i.infitMSQ)
ifmat_ld_co05$Infit_0713[nrow(ifmat_ld_co05)] <- (sum(ifmat_ld_co05[nrow(ifmat_ld_co05),1:is]<0.7)+sum(ifmat_ld_co05[nrow(ifmat_ld_co05),1:is]>1.3))
ifmat_ld_co05$Infit_0812[nrow(ifmat_ld_co05)] <- (sum(ifmat_ld_co05[nrow(ifmat_ld_co05),1:is]<0.8)+sum(ifmat_ld_co05[nrow(ifmat_ld_co05),1:is]>1.2))
ifmat_ld_co05$Infit_085115[nrow(ifmat_ld_co05)] <- (sum(ifmat_ld_co05[nrow(ifmat_ld_co05),1:is]<0.85)+sum(ifmat_ld_co05[nrow(ifmat_ld_co05),1:is]>1.15))
ifmat_ld_co05$ss[nrow(ifmat_ld_co05)] <- ss
ifmat_ld_co05$is[nrow(ifmat_ld_co05)] <- is
ifmat_ld_co05$ni[nrow(ifmat_ld_co05)] <- ncol(ifmat_ld_co05[nrow(ifmat_ld_co05),])
}
}
}
ifmat_ld_co05 <- ifmat_ld_co05[-1,]
summary(ifmat_ld_co05$Infit_0713)
summary(ifmat_ld_co05$Infit_0812)
summary(ifmat_ld_co05$Infit_085115)
write.table(ifmat_ld_co05, "C:/Users/petere/Desktop/ifmat_ld_co05_1000_3crit.txt", sep="\t")
install.packages("lavaan")
library(lavaan)
dat <- HolzingerSwineford1939[,7:15]
misspat <- matrix(runif(nrow(dat) * 9) < 0.3, nrow(dat))
dat[misspat] <- NA
dat <- cbind(HolzingerSwineford1939[,1:3], dat)
quark.list <- quark(data = dat, id = c(1, 2))
final.data <- combinequark(quark = quark.list, percent = 80)
library(semmTools)
library(semTools)
quark.list <- quark(data = dat, id = c(1, 2))
library(mice)
install.packages(mice)
install.packages("mice")
library(mice)
quark.list <- quark(data = dat, id = c(1, 2))
final.data <- combinequark(quark = quark.list, percent = 80)
dat
dat
library(qmethod)
install.packages(qmethod)
install.packages("qmethod")
library(qmethod)
data(lipset)
lipset[[1]] # Shows the dataset, a matrix of 33x9
lipset[[2]] # Shows the text of the 33 statements
results <- qmethod(lipset[[1]], nfactors = 3, rotation = "varimax")
summary(results)
# Merge the statements with their actual text:
scores <- cbind(results$zsc_n, lipset[[2]])
# Order the results by the scores of each factor:
for (i in 1:length(results$loa)) {
View(scores[order(scores[i], decreasing = TRUE), ],
title = paste0("Order for f", i))
}
par(lwd = 1.5, mar = c(4, 4, 0, 0) + 0.1)
plot(results)
abline(h = seq(from = 2, to = 32, by = 3), col = grey(0.2), lty = 2)
runModels("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels")
library(MplusAutomation)
runModels("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels")
summary=extractModelSummaries()
summary=extractModelSummaries(2015-05-20 lg_5t_full package_v_ml_slopred.out)
summary=extractModelSummaries("2015-05-20 lg_5t_full package_v_ml_slopred.out")
setwd("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/")
summary=extractModelSummaries("2015-05-20 lg_5t_full package_v_ml_slopred.out")
summary
models=readModels("2015-05-20 lg_5t_full package_v_ml_slopred.out")
summary_model2=extractModelSummaries("2015-05-20 lg_5t_full package_v_ml_slopred_min.out")
summary_model2$ML
names(summary_model2)
summary_model2$LL
difftest(summary_model1, summary_model2)
anova(summary_model1, summary_model2)
summary_model1=extractModelSummaries("2015-05-20 lg_5t_full package_v_ml_slopred.out")
anova(summary_model1, summary_model2)
summary_model2$AIC
summary_model1$AIC
summary_model1$BIC
summary_model2$BIC
summary_model1=extractModelSummaries("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/2015-05-20 lg_5t_full package_v_ml_slopred.out")
summary_model1$BIC
summary_model2$BIC
library(semPlot)
setwd("C:/Users/petere/Documents/1I_ConfCongWorS/2015 EFPSA Congress Czech/SEM WS_Edelsbrunner EFPSA 2015")
risk <- read.table("riskdata.txt")
# Install packages needed for analysis
#install.packages("lavaan", "semPlot", "psych")
# Load packages needed for analysis
library(lavaan) # Package for SEM
library(semPlot) # Package to draw SEMs
library(psych) # Package for descriptive statistics
attach(risk) # Set risk dataframe as working datafile
semPaths(fit_model8,
"model", # "classic" style
"std", # Show standardized parameter estimates
#style = "lisrel", # LISREL Style: Errors single headed
rotation = 2, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = TRUE, # edged curves
edge.label.cex = 0.6, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = TRUE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "white", #  Background colour
groups = "latents", # Colour dep on latent variable
)
model8 <- '# SEM:
# Risk Behaviour Factor
Risk =~ AvrSex + AvrTob + AvrAlc + ZMar1
ProSoc =~ Zcheers + Zhelpful + Znice
AntSoc =~ Zmean + Zbullies + Zexclude
# Regressions
ZPop ~ Risk + ProSoc + AntSoc + Zattrac + Zsports
ZLike ~ ProSoc + AntSoc + Zattrac
# Correlations
ZPop ~~ ZLike
Risk ~~ Zsports
Risk ~~ 0*ProSoc
'
fit_model8 <- sem(model8,
data=risk,
missing="ml",
estimator="MLR",
fixed.x=FALSE)
summary(fit_model8,
fit.measures = TRUE,
standardized = TRUE)
semPaths(fit_model8,
"model", # "classic" style
"std", # Show standardized parameter estimates
#style = "lisrel", # LISREL Style: Errors single headed
rotation = 2, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = TRUE, # edged curves
edge.label.cex = 0.6, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = TRUE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "white", #  Background colour
groups = "latents", # Colour dep on latent variable
)
semPaths("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/2015-05-20 lg_5t_full package_v_ml_slopred.out",
"model", # "classic" style
"std", # Show standardized parameter estimates
#style = "lisrel", # LISREL Style: Errors single headed
rotation = 2, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = TRUE, # edged curves
edge.label.cex = 0.6, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = TRUE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "white", #  Background colour
groups = "latents", # Colour dep on latent variable
)
semPaths("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/2015-05-20 lg_5t_full package_v_ml_slopred.out",
"model", # "classic" style
"std", # Show standardized parameter estimates
#style = "lisrel", # LISREL Style: Errors single headed
rotation = 3, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = TRUE, # edged curves
edge.label.cex = 0.6, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = TRUE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "white", #  Background colour
groups = "latents", # Colour dep on latent variable
)
semPaths("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/2015-05-20 lg_5t_full package_v_ml_slopred.out",
"model", # "classic" style
#"std", # Show standardized parameter estimates
#style = "lisrel", # LISREL Style: Errors single headed
rotation = 3, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = TRUE, # edged curves
edge.label.cex = 0.6, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = TRUE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "white", #  Background colour
groups = "latents", # Colour dep on latent variable
)
semPaths("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/2015-05-20 lg_5t_full package_v_ml_slopred.out",
"model", # "classic" style
"std", # Show standardized parameter estimates
style = "lisrel", # LISREL Style: Errors single headed
rotation = 3, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = TRUE, # edged curves
edge.label.cex = 0.6, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = TRUE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "white", #  Background colour
groups = "latents", # Colour dep on latent variable
)
semPaths("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/2015-05-20 lg_5t_full package_v_ml_slopred.out",
"model", # "classic" style
"std", # Show standardized parameter estimates
#style = "lisrel", # LISREL Style: Errors single headed
rotation = 3, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = TRUE, # edged curves
edge.label.cex = 0.6, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = TRUE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "white", #  Background colour
groups = "latents", # Colour dep on latent variable
)
semPaths("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/2015-05-20 lg_5t_full package_v_ml_slopred.out",
"model", # "classic" style
"std", # Show standardized parameter estimates
style = "lisrel", # LISREL Style: Errors single headed
rotation = 3, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = TRUE, # edged curves
edge.label.cex = 0.6, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = TRUE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "white", #  Background colour
groups = "latents", # Colour dep on latent variable
)
semPaths("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/2015-05-20 lg_5t_full package_v_ml_slopred.out",
"model", # "classic" style
#"std", # Show standardized parameter estimates
"estimates",
style = "lisrel", # LISREL Style: Errors single headed
rotation = 3, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = TRUE, # edged curves
edge.label.cex = 0.6, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = TRUE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "white", #  Background colour
groups = "latents", # Colour dep on latent variable
)
semPaths("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/2015-05-20 lg_5t_full package_v_ml_slopred.out",
"model", # "classic" style
#"std", # Show standardized parameter estimates
"estimates",
style = "lisrel", # LISREL Style: Errors single headed
rotation = 1, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = TRUE, # edged curves
edge.label.cex = 0.6, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = TRUE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "white", #  Background colour
groups = "latents", # Colour dep on latent variable
)
semPaths("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/2015-05-20 lg_5t_full package_v_ml_slopred.out",
"model", # "classic" style
#"std", # Show standardized parameter estimates
"estimates",
style = "lisrel", # LISREL Style: Errors single headed
rotation = 1, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = TRUE, # edged curves
edge.label.cex = 0.6, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = FALSE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "white", #  Background colour
groups = "latents", # Colour dep on latent variable
)
semPaths("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/2015-05-20 lg_5t_full package_v_ml_slopred.out",
"model", # "classic" style
#"std", # Show standardized parameter estimates
"estimates",
style = "lisrel", # LISREL Style: Errors single headed
rotation = 1, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = TRUE, # edged curves
edge.label.cex = 0.6, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = FALSE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "white", #  Background colour
#groups = "latents", # Colour dep on latent variable
)
semPaths("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/2015-05-20 lg_5t_full package_v_ml_slopred.out",
"model", # "classic" style
#"std", # Show standardized parameter estimates
"estimates",
style = "lisrel", # LISREL Style: Errors single headed
rotation = 1, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = TRUE, # edged curves
edge.label.cex = 0.6, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = FALSE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "blue", #  Background colour
#groups = "latents", # Colour dep on latent variable
)
semPaths("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/2015-05-20 lg_5t_full package_v_ml_slopred.out",
"model", # "classic" style
#"std", # Show standardized parameter estimates
"estimates",
style = "lisrel", # LISREL Style: Errors single headed
rotation = 1, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = TRUE, # edged curves
edge.label.cex = 0.6, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = FALSE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "blue", #  Background colour
groups = "latents", # Colour dep on latent variable
)
semPaths("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/2015-05-20 lg_5t_full package_v_ml_slopred.out",
"model", # "classic" style
#"std", # Show standardized parameter estimates
"estimates",
style = "lisrel", # LISREL Style: Errors single headed
rotation = 1, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = TRUE, # edged curves
edge.label.cex = 0.3, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = FALSE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "white", #  Background colour
groups = "latents", # Colour dep on latent variable
)
semPaths("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/2015-05-20 lg_5t_full package_v_ml_slopred.out",
"model", # "classic" style
#"std", # Show standardized parameter estimates
"estimates",
style = "lisrel", # LISREL Style: Errors single headed
rotation = 1, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = FALSE, # edged curves
edge.label.cex = 0.4, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = FALSE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "white", #  Background colour
groups = "latents", # Colour dep on latent variable
)
semPaths("C:/Users/petere/Desktop/chess/2015-05-20_careerII/AutomationModels/2015-05-20 lg_5t_full package_v_ml_slopred_min.out",
"model", # "classic" style
#"std", # Show standardized parameter estimates
"estimates",
style = "lisrel", # LISREL Style: Errors single headed
rotation = 1, # rotate whole diagram
intercepts = FALSE, # (not) show intercepts (means)
curvePivot = TRUE, # edged curves
edge.label.cex = 0.4, # font size parameter values
sizeMan = 3, # Size of manifest variables
sizeInt = 1, # Size of Intercepts (means)
sizeLat = 4, # Size of latent vairables
borders = FALSE, # Show variable borders
label.prop = 0.9, # Font size var labels
curve = 0.5, # How much curviness?
bg = "white", #  Background colour
groups = "latents", # Colour dep on latent variable
)
