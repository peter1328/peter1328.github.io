shiny::runApp('1I_ConfCongWorS/2015 EFPSA Congress Czech/bayes_workshop/cambridge/code/updating')
shiny::runApp('1I_ConfCongWorS/2015 EFPSA Congress Czech/bayes_workshop/cambridge/code/updating')
sequence <- c(1:15)
sequence
bfdci1F_1 <- c(1,2,1,2,3,3,2,1,1,1,0,0,0,1,0,0)
library(llmer)
library(lmer)
library(lme4)
data <- data.matrix(sequence, bfdci1F_1)
model.2 <- lmer(bfdci1F_1 ~ -1
+ sequence:bfdci1F_1
+ (1 + sequence:bfdci1F_1 | CoupleID) ,
data = data)
data <- list(sequence, bfdci1F_1)
model.2 <- lmer(bfdci1F_1 ~ -1
+ sequence:bfdci1F_1
+ (1 + sequence:bfdci1F_1 | CoupleID) ,
data = data)
library(MCMCpack)
library(BMA)
#library(mice)
#-------  Read in data and delete missing data --------#
canada1 <- read.csv(file.choose(),header=T)
canada1[canada1==999999]=NA
#canada1 <- mice(canada1, m=1, method='pmm')
canada1 <- na.omit(canada1)
attach(canada1)
male <- ifelse(ITSEX==2,0,1)
canada1 <- cbind(canada1,male)
#-------  Run Bayesian regression Non-Informative Prior with one chain -------  #
sink("~/Desktop/test.txt")
sink("C:/Users/petere/Desktop/test.txt")
postCanadaPV1 <- MCMCregress(ASRREA01~male+ASBG04+ASBGSBS+ASBGSLR+ASBGSMR+ASBGSCR+ASBR05E+ASBR05F+ASBR05G,
chains=1,burnin=1000,mcmc=20000,seed=1234,
thin=5,data=canada1)
sink()
#------ Obtain diagnostics ----------- #
#pdf("~/Desktop/test.pdf")
autocorr.plot(postCanadaPV1)
plot(postCanadaPV1)
germany1 <- read.csv(file.choose(),header=T)
germany1[germany1==999999]=NA
#canada1 <- mice(canada1, m=1, method='pmm')
germany1 <- na.omit(germany1)
attach(germany1)
male <- ifelse(ITSEX==2,0,1)
germany1 <- cbind(germany1,male)
#-------  Run Bayesian regression Non-Informative Prior with one chain -------  #
sink("C:/Users/petere/Desktop/test.txt")
detach(canada1)
attach(germany1)
male <- ifelse(ITSEX==2,0,1)
germany1 <- cbind(germany1,male)
#-------  Run Bayesian regression Non-Informative Prior with one chain -------  #
sink("C:/Users/petere/Desktop/test.txt")
postGermanyPV1 <- MCMCregress(ASRREA01~male+ASBG04+ASBGSBS+ASBGSLR+ASBGSMR+ASBGSCR+ASBR05E+ASBR05F+ASBR05G,
chains=1,burnin=1000,mcmc=20000,seed=1234,
thin=5,data=germany1)
sink()
#------ Obtain diagnostics ----------- #
#pdf("~/Desktop/test.pdf")
autocorr.plot(postGermanyPV1)
postGermanyPV1 <- MCMCregress(ASRREA01~male+ASBG04+ASBGSBS+ASBGSLR+ASBGSMR+ASBGSCR+ASBR05E+ASBR05F+ASBR05G,
chains=1,burnin=1000,mcmc=20000,seed=1234,
thin=5,data=germany1)
sink()
library(MCMCpack)
library(BMA)
#library(mice)
#-------  Read in data and delete missing data --------#
germany1 <- read.csv(file.choose(),header=T)
germany1[germany1==999999]=NA
#canada1 <- mice(canada1, m=1, method='pmm')
germany1 <- na.omit(germany1)
attach(germany1)
male <- ifelse(ITSEX==2,0,1)
germany1 <- cbind(germany1,male)
#-------  Run Bayesian regression Non-Informative Prior with one chain -------  #
sink("C:/Users/petere/Desktop/test.txt")
postGermanyPV1 <- MCMCregress(ASRREA01~male+ASBG04+ASBGSBS+ASBGSLR+ASBGSMR+ASBGSCR+ASBR05E+ASBR05F+ASBR05G,
chains=1,burnin=1000,mcmc=20000,seed=1234,
thin=5,data=germany1)
sink()
#------ Obtain diagnostics ----------- #
#pdf("~/Desktop/test.pdf")
library(MCMCpack)
infpostGermanyPV1 <- MCMCregress(ASRREA01~male+ASBG04+ASBGSBS+ASBGSLR+ASBGSMR+ASBGSCR+ASBR05E+ASBR05F+ASBR05G, chains=1,burnin=1000,mcmc=20000,seed=1234,thin=5,data=germany1, marginal.likelihood="Chib95", b0=c(417, -3.33, 13.6795, 0.77, 4.06, -6.637, 9.14, 5.55, -2.61, 0.40),B0=5)
infpostGermanyPV2 <- MCMCregress(ASRREA01~male+ASBG04+ASBGSBS+ASBGSLR+ASBGSMR+ASBGSCR+ASBR05E+ASBR05F+ASBR05G, chains=1,burnin=1000,mcmc=20000,seed=1234,thin=5,data=germany1, marginal.likelihood="Chib95", b0=c(417, -3.33, 13.6795, 0.77, 4.06, -6.637, 9.14, 5.55, -2.61, 0.40),B0=1)
summary(infpostCanadaPV1)
summary(infpostGermanyPV1)
summary(infpostGermanyPV2)
set.seed(666)
infpostGermanyPV3 <- MCMCregress(ASRREA01~male+ASBG04+ASBGSBS+ASBGSLR+ASBGSMR+ASBGSCR+ASBR05E+ASBR05F+ASBR05G, chains=2,burnin=100,mcmc=2000,seed=1234,thin=10,data=germany1, marginal.likelihood="Chib95", b0=c(417, -3.33, 13.6795, 0.77, 4.06, -6.637, 9.14, 5.55, -2.61, 0.40),B0=0.1)
autocorr.plot(infpostGermanyPV3)
autocorr.plot(infpostGermanyPV3)
infpostGermanyPV3 <- MCMCregress(ASRREA01~male+ASBG04+ASBGSBS+ASBGSLR+ASBGSMR+ASBGSCR+ASBR05E+ASBR05F+ASBR05G, chains=2,burnin=100,mcmc=2000,seed=1234,thin=10,data=germany1, marginal.likelihood="Chib95", b0=c(417, -3.33, 13.6795, 0.77, 4.06, -6.637, 9.14, 5.55, -2.61, 0.40),B0=0.1)
autocorr.plot(infpostGermanyPV3)
autocorr.plot(infpostGermanyPV3)
plot(infpostGermanyPV3)
plot(infpostGermanyPV3)
infpostGermanyPV3 <- MCMCregress(ASRREA01~male+ASBG04+ASBGSBS+ASBGSLR+ASBGSMR+ASBGSCR+ASBR05E+ASBR05F+ASBR05G, chains=4,burnin=1,mcmc=2000,seed=1234,thin=1,data=germany1, marginal.likelihood="Chib95", b0=c(417, -3.33, 13.6795, 0.77, 4.06, -6.637, 9.14, 5.55, -2.61, 0.40),B0=0.1)
plot(infpostGermanyPV3)
infpostGermanyPV3 <- MCMCregress(ASRREA01~male+ASBG04+ASBGSBS+ASBGSLR+ASBGSMR+ASBGSCR+ASBR05E+ASBR05F+ASBR05G, chains=2,burnin=1,mcmc=2000,seed=1234,thin=10,data=germany1, marginal.likelihood="Chib95", b0=c(417, -3.33, 13.6795, 0.77, 4.06, -6.637, 9.14, 5.55, -2.61, 0.40),B0=0.1)
plot(infpostGermanyPV3)
infpostGermanyPV3 <- MCMCregress(ASRREA01~male+ASBG04+ASBGSBS+ASBGSLR+ASBGSMR+ASBGSCR+ASBR05E+ASBR05F+ASBR05G, chains=2,burnin=1,mcmc=200,seed=1234,thin=10,data=germany1, marginal.likelihood="Chib95", b0=c(417, -3.33, 13.6795, 0.77, 4.06, -6.637, 9.14, 5.55, -2.61, 0.40),B0=0.1)
plot(infpostGermanyPV3)
infpostGermanyPV3 <- MCMCregress(ASRREA01~male+ASBG04+ASBGSBS+ASBGSLR+ASBGSMR+ASBGSCR+ASBR05E+ASBR05F+ASBR05G, chains=2,burnin=1,mcmc=200000,seed=1234,thin=10,data=germany1, marginal.likelihood="Chib95", b0=c(417, -3.33, 13.6795, 0.77, 4.06, -6.637, 9.14, 5.55, -2.61, 0.40),B0=0.1)
plot(infpostGermanyPV3)
m1 <- MCMCregress(ASRREA01~male+ASBG04+ASBGSBS+ASBGSLR+ASBGSMR+ASBGSCR+ASBR05E+ASBR05F+ASBR05G, chains=1,burnin=1000,mcmc=20000,seed=1234,thin=5,data=germany1, marginal.likelihood="Chib95", b0=c(417, -3.33, 13.6795, 0.77, 4.06, -6.637, 9.14, 5.55, -2.61, 0.40),B0=5)
m2  <- MCMCregress(ASRREA01~male+ASBG04, burnin=1000,mcmc=20000,seed=1234,thin=5,data=germany1,marginal.likelihood="Chib95", b0=c(417, -3.33, 13.6795),B0=5)
m3  <- MCMCregress(ASRREA01~ASBGSLR+ASBGSMR+ASBGSCR,burnin=1000,mcmc=20000,seed=1234,thin=5,data=germany1,marginal.likelihood="Chib95", b0=c(417, 4.06, -6.637, 9.14),B0=5)
m4 <- MCMCregress(ASRREA01~ASBGSBS+ASBR05E+ASBR05F+ASBR05G,
burnin=1000,mcmc=20000,seed=1234,thin=5,data=germany1,marginal.likelihood="Chib95", b0=c(417, 0.77, 5.55, -2.61, 0.40),B0=5)
#------- Obtain Bayes Factors-------#
BF <- BayesFactor(m1,m2,m3,m4)
summary(BF)
#########################################################################
#######  Bayesian Model Averaging #######################################
#########################################################################
#------ Select DV and IVs and run BMA ----------#
#######  Bayesian Model Averaging #######################################
#########################################################################
#------ Select DV and IVs and run BMA ----------#
germanyBMA <- subset(germany1,select=c(ASRREA01,male, ASBG04, ASBGSBS, ASBGSLR, ASBGSMR,ASBGSCR,ASBR05E,ASBR05F,ASBR05G))
y <- germanyBMA[,1]
x <- germanyBMA[,2:10]
germanyBMA1 <- bicreg(x,y)
summary(germanyBMAa1)
summary(germanyBMA1)
plot(germanyBMA1)
plot(germanyBMA1)
plot(germanyBMA1)
summary(infpostGermanyPV1)
summary(infpostGermanyPV2)$statistics
summary(infpostGermanyPV2)$statistics[1]
summary(infpostGermanyPV2)$statistics[,1]
summary(infpostGermanyPV2)$statistics[1,1]
summary(infpostGermanyPV2)$statistics[2,1]
prior <- summary(infpostGermanyPV2)$statistics[,1]
prior[1]
prior[1:4]
summary(germanyBMA1)
plot(germanyBMA1)
436*.87+422*0.086+426*.047
##############################################################
# Normalverteilung
##############################################################
library(R2WinBUGS)
library(coda)
pfad <- "c:\\Users\\robitzsch\\Dropbox\\Workshops\\WinBUGS\\2015-09__ZIB_Kiel_Bayes\\Pool__1_Zusammenstellung\\"
setwd(pfad)
# Winbugs-Pfad
winbugs.path <- "c:/WinBUGS14/"
setwd(pfad)
winbugs.path <- "c:/users/petere/WinBUGS14/"
setwd(pfad)
winbugs.path <- "C:/Users/petere/Desktop/Kiel Bayes Workshop Material/Pool_Tag1/"
setwd(pfad)
winbugs.path <- "C:/Users/petere/Desktop/Kiel Bayes Workshop Material/Pool_Tag1/"
setwd(pfad)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='peter1328',
token='C6613C3DC0E0680B9D7A701C259113E2',
secret='<SECRET>')
shinyapps::setAccountInfo(name='peter1328',
token='C6613C3DC0E0680B9D7A701C259113E2',
secret='<SECRET>')
shinyapps::setAccountInfo(name='peter1328', token='C6613C3DC0E0680B9D7A701C259113E2', secret='GxxmYP2DH+ic/DIplEPu1bTb10zG/KQnsgm2p1Id')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
library(shiny)
library(ggplot2)
function(input, output) {
dataset <- reactive({
diamonds[sample(nrow(diamonds), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
if (input$jitter)
p <- p + geom_jitter()
if (input$smooth)
p <- p + geom_smooth()
print(p)
}, height=700)
}
dataset <- diamonds
fluidPage(
titlePanel("Diamonds Explorer"),
sidebarPanel(
sliderInput('sampleSize', 'Sample Size', min=1, max=nrow(dataset),
value=min(1000, nrow(dataset)), step=500, round=0),
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset))),
checkboxInput('jitter', 'Jitter'),
checkboxInput('smooth', 'Smooth'),
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
),
mainPanel(
plotOutput('plot')
)
)
runApp()
0.047/0.1156
0.007/0.1156
.67^2
library(lavaan)
cov <- matrix(
c(1, .5, .5, .3, .5, 1, .5, .3, .5, .5, 1, .3),
nrow = 4,
ncol = 3)
cov
cov <- matrix(
c(1, .5, .5, .3, .5, 1, .5, .3, .5, .5, 1, .3, .3, .3, .3, 1),
nrow = 4,
ncol = 4)
cov
crea.cov <- matrix(
c(1, .5, .5, .3, .5, 1, .5, .3, .5, .5, 1, .3, .3, .3, .3, 1),
nrow = 4,
ncol = 4)
# classic wheaton et al model
crea.model <- '
# latent variable
eta1     =~ y1 + y2 + y3
# regression
z ~ eta1
'
fit <- sem(crea.model,
sample.cov = crea.cov,
sample.nobs = 100)
summary(fit, standardized = TRUE)
crea.cov <- '
1
.5 1
.5 .5 1
.3 .3 .3 1 '
lower <- '
1
.5 1
.5 .5 1
.3 .3 .3 1 '
crea.cov <-
getCov(lower, names = c("y1", "y2", "y3", "z"))
fit <- sem(crea.model,
sample.cov = crea.cov,
sample.nobs = 100)
summary(fit, standardized = TRUE)
crea.cov <- matrix(
c(1, .5, .5, .3, .5, 1, .5, .3, .5, .5, 1, .3, .3, .3, .3, 1),
nrow = 4,
ncol = 4)
crea.cov <- crea.cov(names = c("y1", "y2", "y3", "z"))
crea.cov <- matrix(crea.cov, names = c("y1", "y2", "y3", "z"))
crea.cov <- matrix(
c(1, .5, .5, .3, .5, 1, .5, .3, .5, .5, 1, .3, .3, .3, .3, 1),
nrow = 4,
ncol = 4)
rownames(crea.cov) <- c("y1", "y2", "y3", "z")
crea.cov
dimnames(crea.cov) <- c("y1", "y2", "y3", "z")
dimnames(crea.cov) <- list(rownames(c("y1", "y2", "y3", "z")),
colnames(c("y1", "y2", "y3", "z"))
)
crea.cov
rownames(crea.cov) <- c("y1", "y2", "y3", "z")
colnames(crea.cov) <- c("y1", "y2", "y3", "z")
crea.cov
# classic wheaton et al model
crea.model <- '
# latent variable
eta1     =~ y1 + y2 + y3
# regression
z ~ eta1
'
fit <- sem(crea.model,
sample.cov = crea.cov,
sample.nobs = 100)
summary(fit, standardized = TRUE)
crea.cov
lower <- '
1
.5 1
.5 .5 1
.3 .3 .3 1 '
crea.cov <- getCov(lower, names = c("y1", "y2", "y3", "z"))
fit <- sem(crea.model,
sample.cov = crea.cov,
sample.nobs = 100)
summary(fit, standardized = TRUE)
crea.cov
crea.model <- '
# latent variable
eta1     =~ y1 + y2 + y3
# regression
z ~~ eta1
'
fit <- sem(crea.model,
sample.cov = crea.cov,
sample.nobs = 100)
summary(fit, standardized = TRUE)
# creativity model
crea.model <- '
# latent variable
eta1     =~ y1 + y2 + y3
# regression
z ~ eta1
'
fit <- sem(crea.model,
sample.cov = crea.cov,
sample.nobs = 100)
summary(fit, standardized = TRUE)
# creativity model
crea.model <- '
# latent variable
eta1     =~ y1 + y2 + y3
# regression
z ~~ eta1
'
fit <- sem(crea.model,
sample.cov = crea.cov,
sample.nobs = 100)
summary(fit, standardized = TRUE)
# creativity model
crea.model <- '
# latent variable
eta1     =~ y1 + y2 + y3
# regression
z ~~ eta1
'
fit <- sem(crea.model,
sample.cov = crea.cov,
sample.nobs = 100)
summary(fit, standardized = TRUE)
# creativity model
crea.model <- '
# latent variable
eta1     =~ y1 + y2 + y3
# regression/correlation
z ~ eta1
'
fit <- sem(crea.model,
sample.cov = crea.cov,
sample.nobs = 100)
summary(fit, standardized = TRUE)
library(lavaan) # Package for SEM
library(semPlot) # Package to draw SEMs
semPaths(fit,
style = "lisrel",
"estimates",
rotation = 4,
)
semPaths(fit,
style = "lisrel",
"estimates",
rotation = 1,
)
semPaths(fit,
style = "lisrel",
"std",
rotation = 1,
)
semPaths(fit,
style = "lisrel",
"std",
rotation = 3,
)
crea.model <- '
# latent variable
eta     =~ y1 + y2 + y3
# regression/correlation
z ~ eta
'
# Fit model
fit <- sem(crea.model,
sample.cov = crea.cov,
sample.nobs = 100)
# Investigate model output
summary(fit, standardized = TRUE)
# Visualize model
semPaths(fit,
style = "lisrel",
"std",
rotation = 3,
)
4.36^2
4.14^2
4.36^2/(4.14^2)
4.14^2/(4.36^2)
7.42*(10^(-5))
7.42*(10^(-5))/(9.76*(10^(-5)))
7.42*(10^(-5))^2/((9.76*(10^(-5)))^2)
7.42*(10^(-5))^2
(7.42*(10^(-5)))^2
(7.42*(10^(-5)))^2/((9.76*(10^(-5)))^2)
library(lavaan) # Package for SEM
library(semPlot) # Package to draw SEMs
# Define correlation matrix
lower <- '
1
.5 1
.5 .5 1
.3 .3 .3 1 '
crea.cov <- getCov(lower, names = c("y1", "y2", "y3", "z")) # Assign variable names
# Define model
crea.model <- '
# latent variable
eta     =~ y1 + y2 + y3
# regression/correlation
z ~ eta
'
# Fit model
fit <- sem(crea.model,
sample.cov = crea.cov,
sample.nobs = 100)
# Investigate model output
summary(fit, standardized = TRUE)
# Visualize model
semPaths(fit,
style = "lisrel",
"std",
rotation = 3,
)
# Define model
crea.model <- '
# latent variable
eta     =~ y1 + y2 + y3
# regression/correlation
z ~~ eta
'
# Fit model
fit <- sem(crea.model,
sample.cov = crea.cov,
sample.nobs = 100)
# Investigate model output
summary(fit, standardized = TRUE)
# Visualize model
semPaths(fit,
style = "lisrel",
"std",
rotation = 3,
)
# Define model
crea.model <- '
# latent variable
eta     =~ y1 + y2 + y3
# regression/correlation
z ~~ eta
'
# Fit model
fit <- sem(crea.model,
sample.cov = crea.cov,
sample.nobs = 100)
# Investigate model output
summary(fit, standardized = TRUE)
# Visualize model
semPaths(fit,
style = "lisrel",
"std",
rotation = 3,
)
r.version
0.71^2
0.50/0.71
library(lavaan) # Package for SEM
library(semPlot) # Package to draw SEMs
# Define correlation matrix
lower <- '
1
.5 1
.5 .5 1
.3 .3 .3 1 '
crea.cov <- getCov(lower, names = c("y1", "y2", "y3", "z")) # Assign variable names
# Define model
crea.model <- '
# latent variable
eta     =~ y1 + y2 + y3
# regression/correlation
z ~ eta
'
# Fit model
fit <- sem(crea.model,
sample.cov = crea.cov,
sample.nobs = 100)
# Investigate model output
summary(fit, standardized = TRUE)
# Visualize model
semPaths(fit,
style = "lisrel",
"std",
rotation = 3,
)
setwd("C:/users/petere/desktop/SlidyTrier")
install.packages("slidify")
library(installr)
updateR()
